#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('confusionserver:server');
var http = require('http');
var Chat = require('../models/chat');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//==========================SOCKET EVENTS=============================


io.sockets.on('connection', (socket) => {
  console.log('a user connected');
  var id = socket.id;
  socket.on('connection_room',(chat)=>{
    if(chat.prev != ''){
      if(chat.prev != chat.chat_id){
        io.sockets.sockets[id].leave(chat.prev,(err)=>{
          console.log(err)
          io.in(chat.prev).clients((err, users) => {console.log(users)})
        });
    }
    }
    
    socket.join(chat.chat_id);
    console.log("User`s been connected to room: "+ chat.chat_id);
  })

  socket.on('disconnect',(socket)=>{
    console.log("disconnect")
  })

  socket.on('message',(data)=>{
    Chat.findById(data.chat_id).then((chat)=>{
      var now = new Date();
      var day = now.getDate();
      var month = now.getMonth() + 1;
      var year = now.getFullYear();
      var hours = now.getHours();
      var minutes = now.getMinutes();

      var full_time = "0"+day+".0"+month+"."+year+" "+hours+":"+minutes;

      chat.messages.push({body: data.body, user: data.id, time: full_time});
      chat.save().then(()=>{
        Chat.findById(data.chat_id).populate({path: "messages.user", select:"username picture", model: "User"}).then((chat)=>{
          io.sockets.in(data.chat_id).emit('reload',{messages: chat.messages})
      }).catch((err)=>{
          console.log(err)
      })
      });
  }).catch((err)=>{
      console.log(err)
  })
  })
});


//====================================================================

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
